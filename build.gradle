apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'liquibase'
apply plugin: 'checkstyle'
apply plugin: 'war'

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

configurations {
    integTestCompile { extendsFrom compile }
    integTestRuntime { extendsFrom integTestCompile, runtime }
}

repositories {

    mavenCentral()
    maven {
        url "http://jaspersoft.artifactoryonline.com/jaspersoft/third-party-ce-artifacts/"
    }

}

dependencies {

    /* ---------------- spring dependencies ---------------- */
    compile('org.springframework:spring-aop:3.1.2.RELEASE')
    compile('org.springframework:spring-asm:3.1.2.RELEASE')
    compile('org.springframework:spring-beans:3.1.2.RELEASE')
    compile('org.springframework:spring-context:3.1.2.RELEASE')
    compile('org.springframework:spring-core:3.1.2.RELEASE')
    compile('org.springframework:spring-jdbc:3.1.2.RELEASE')
    compile('org.springframework:spring-orm:3.1.2.RELEASE')
    compile('org.springframework:spring-tx:3.1.2.RELEASE')
    compile('org.springframework:spring-web:3.1.2.RELEASE')
    compile('org.springframework:spring-webmvc:3.1.2.RELEASE')
    compile('org.springframework:spring-aspects:3.1.2.RELEASE')
    compile('org.springframework:spring-oxm:3.1.2.RELEASE')
    compile('org.springframework:spring-test:3.1.1.RELEASE')
    compile('org.springframework.security:spring-security-core:3.1.2.RELEASE')
    compile('org.springframework.security:spring-security-web:3.1.2.RELEASE')
    compile('org.springframework.security:spring-security-config:3.1.2.RELEASE')

    /* ---------------- persistence dependencies ---------------- */
    compile('org.hibernate:hibernate-core:4.0.1.Final')
    compile('org.hibernate:hibernate-validator:4.3.0.Final')
    compile('org.hibernate.common:hibernate-commons-annotations:4.0.1.Final')
    compile('org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final')
    compile('org.hibernate:hibernate-entitymanager:4.0.1.Final')
    compile('javax.validation:validation-api:1.0.0.GA')

    compile('javassist:javassist:3.12.1.GA')
    compile('javax.transaction:jta:1.1')

    compile('org.hsqldb:hsqldb:2.2.8')
    compile('org.hsqldb:sqltool:2.2.8')
    compile('com.h2database:h2:1.3.167')
    compile('org.liquibase:liquibase-core:2.0.1')
    compile('com.augusttechgroup:groovy-liquibase-dsl:0.7.3')
    compile('postgresql:postgresql:9.1-901.jdbc4')

    compile('javax.mail:mail:1.5.0-b01')

    /* ---------------- aspect dependencies ---------------- */
    compile('org.aspectj:aspectjtools:1.6.2')
    compile('aspectj:aspectjweaver:1.5.4')
    compile('org.aspectj:aspectjrt:1.6.12')
    compile('aspectj:aspectjlib:1.5.3')

    compile('org.antlr:antlr-runtime:3.4')
    compile('org.antlr:antlr:3.4')
    compile('cglib:cglib:2.2.2')
    compile('asm:asm-commons:3.3.1')

    compile('junit:junit:4.8.2')

    compile('org.slf4j:slf4j-simple:1.6.4')
    compile('org.slf4j:slf4j-api:1.6.4')

    compile('commons-dbcp:commons-dbcp:20030825.184428')
    compile('commons-pool:commons-pool:20030825.183949')
    compile('commons-logging:commons-logging:1.1.1')

    compile('taglibs:standard:1.0.6')

    compile('commons-io:commons-io:2.4')
    compile('commons-collections:commons-collections:3.2.1')
    compile('commons-fileupload:commons-fileupload:1.3')
    compile('org.apache.commons:commons-lang3:3.0')
    compile('commons-codec:commons-codec:1.8')

    /* ---------------- jsf dependencies ---------------- */
    compile('com.sun.faces:jsf-api:2.2.9')
    compile('com.sun.faces:jsf-impl:2.2.9')
    compile('org.primefaces:primefaces:6.0')
    compile('javax.enterprise:cdi-api:1.2')
    compile('org.glassfish.web:el-impl:2.2')

    /* ------------- rest dependencies ------------- */
    compile('com.sun.jersey:jersey-client:1.19')
    compile('com.sun.jersey:jersey-core:1.19')
    compile('com.sun.jersey:jersey-json:1.19')

}

/* ---------------- integration tests setup ---------------- */
sourceSets {
    integTest {
        compileClasspath = sourceSets.main.output + configurations.integTestCompile
        runtimeClasspath = output + sourceSets.main.output + configurations.integTestRuntime
    }
}

task intTest(type: Test) {
    testClassesDir = sourceSets.integTest.output.classesDir
    classpath = sourceSets.integTest.runtimeClasspath
}


task intTestJar(type: Jar) {
    from sourceSets.integTest.output
}

task unitTestJar(type: Jar) {
    from sourceSets.test.output
}

/* ---------------- checkstyle setup ---------------- */
checkstyle {
    configProperties.suppressionsFile = configFile.getParent() + '\\suppressions.xml'
}

checkstyleMain {
    ignoreFailures = false
    reports {
        include('**/*.java')
        xml {
            destination "${rootProject.buildDir}/reports/checkstyle/main.xml"
        }
    }
    configFile = file('./config/checkstyle/checkstyle.xml')
}

checkstyleTest {
    ignoreFailures = false
    reports {
        include('**/*.java')
        xml {
            destination "${rootProject.buildDir}/reports/checkstyle/test.xml"
        }
    }
    configFile = file('./config/checkstyle/checkstyle-test.xml')
}


task checkstyleReport << {
    if (file("$buildDir/reports/checkstyle/${checkType}.xml").exists()) {
        ant.xslt(in: "$buildDir/reports/checkstyle/${checkType}.xml",
                style: "config/checkstyle/checkstyle.xsl",
                out: "$buildDir/reports/checkstyle/checkstyle_${checkType}.html"
        )
    }
}

task quality(dependsOn: ['checkstyleMain', 'checkstyleTest'])

gradle.taskGraph.afterTask {Task task, TaskState state ->
    if (state.failure) {
        if (task.name in ['checkstyleMain', 'checkstyleTest']) {
            checkstyleReport {
                def matcher = task.name =~ /^checkstyle(.*)$/
                if (matcher.matches()) {
                    checkType = matcher.group(1).toLowerCase()
                }
            }
            checkstyleReport.execute()
        }
    }
}

/* ---------------- convert resources ---------------- */
war.dependsOn 'native2ascii'

task native2ascii << {

    ant.delete() {
        fileset(dir: "${processResources.destinationDir}/config/") {
            include(name: '*.properties')
        }
    }
    ant.native2ascii(src: 'src/main/resources/config',
            dest: "${processResources.destinationDir}/config",
            includes: '*.properties',
            encoding: 'UTF-8')
}

/* ---------------- liquibase setup---------------------- */
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group:'net.saliman', name: 'gradle-liquibase-plugin', version: '1.0.2'
        classpath 'postgresql:postgresql:9.1-901.jdbc4'
    }
}

liquibase {
    activities {
        dbInit {
            changeLogFile 'src/main/resources/liquibase/tablespace.groovy'
            url postgreBaseUrl
            username postgreRootUserName
            password postgreRootUserPassword
        }
        dbUpdate {
            changeLogFile 'src/main/resources/liquibase/main.groovy'
            url postgreBaseUrl
            username postgreUserName
            password postgreUserPassword
        }
    }
}

task init << {
    liquibase.runList = 'dbInit'
}

task upd << {
    liquibase.runList = 'dbUpdate'
}

task dbInit(dependsOn: ['init', 'update'])

task dbUpdate(dependsOn: ['upd', 'update'])

/* ---------------- exclude resources from war ---------------- */
war.rootSpec.exclude "liquibase"
war.rootSpec.exclude "**/*.jrxml"